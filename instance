#!/bin/bash
#shellcheck disable=2164,1090,2155,2038
set -e
#set -x

_ec2_scripts_root="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
source "$_ec2_scripts_root/lib/config.bash"

read -rd '' instance_fields_selection <<- 'FIELDS' || true
  id: InstanceId,
  name: Tags[?Key=='Name'] | [0].Value,
  state: State.Name,
  dns: PublicDnsName
FIELDS

function strip {
  cut -d'"' -f2
}

function terminate {
  #'describe-instance-status' gives only running instances
  #Assume there is only one running instance to terminate so take only the first item
  local id="$(
    aws ec2 describe-instance-status --query 'InstanceStatuses[0].InstanceId' |
      strip
  )"
  if [[ "$id" = "null" ]]; then
    echo 'No running instance to terminate!' >&2
    return 1
  else
    aws ec2 terminate-instances --instance-ids "$id"
  fi
}

function launch {
  local image_name='ubuntu-docker-app'
  local image_id='ami-0f8b8babb98cc66d0'

  local name="${1:-Unnamed}"
  #Allow only one running instance
  if [[ ! "$(aws ec2 describe-instance-status \
    --query 'length(InstanceStatuses)')" = "0" ]]; then
    echo 'Instance already launched!' >&2
    return 1
  fi

  local bucket_name=
  local iam_profile_name=
  __ec2_config_read bucket_name iam_profile_name
  pushd "$_ec2_scripts_root"

  rm -rf ".staging"
  mkdir -p ".staging/data"
  source "image-config/$image_name/prepare.bash"
  find ".staging/data" -print | xargs touch
  aws s3 sync --delete ".staging/data" "s3://$bucket_name/instance-setup-data"

  local key_name="$(aws ec2 describe-key-pairs --query 'KeyPairs[0].KeyName' | strip)"
  #Use default security group and VPC id for launcching instance
  #t2.micro, ubuntu 20
  aws ec2 run-instances --instance-type t2.micro \
    --count 1 \
    --image-id "$image_id" \
    --key-name "$key_name" \
    --iam-instance-profile "Name=$iam_profile_name" \
    --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=$name}]" \
    --query "Instances[0].{$instance_fields_selection}" \
    --user-data 'file://.staging/setup'

  popd
}

function list {
  aws ec2 describe-instances \
    --query "Reservations[*].Instances[].{$instance_fields_selection}[*].*" |
    jq -r '.[] | join("\t")'
}

cmd="${1:-list}"

case "$cmd" in
  launch)
    launch "$2"
    ;;
  terminate)
    terminate
    ;;
  list)
    list
    ;;
  *)
    echo "Invalild cmd: $cmd. Must be one of: ${BOLD}launch${SGR0}, ${BOLD}terminate${SGR0}, ${BOLD}list${SGR0}" >&2
    exit 1
    ;;
esac
